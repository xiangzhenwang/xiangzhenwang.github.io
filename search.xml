<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Weex环境搭建]]></title>
      <url>/2018/05/08/Weex%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h4 id="1-什么是Weex"><a href="#1-什么是Weex" class="headerlink" title="1.什么是Weex?"></a>1.什么是Weex?</h4><p>Weex 是一个使用 Web 开发体验来开发高性能原生应用的框架。使用同一套代码可以在不同平台上使用。<br><a id="more"></a></p>
<h4 id="2-工作原理"><a href="#2-工作原理" class="headerlink" title="2.工作原理"></a>2.工作原理</h4><p>开发者在本地编写Web页面，然后通过命令工具将其编译成一段JavaScript代码,生成一个 Weex 的 JS bundle；同时，开发者可以将生成的 JS bundle 部署至云端，然后通过网络请求或预下发的方式加载至用户的移动客户端；移动客户端使用Weex SDK准备好一个 JavaScript执行环境，并且在用户打开一个 Weex 页面时在这个执行环境中执行相应的 JS bundle，并将执行过程中产生的各种命令发送到 native 端进行界面渲染、数据存储、网络通信、调用设备功能及用户交互响应等功能；同时，如果用户希望使用浏览器访问这个界面，那么他可以在浏览器里打开一个相同的 web 页面，这个页面和移动应用使用相同的页面源代码，但被编译成适合Web展示的JS Bundle，通过浏览器里的 JavaScript 引擎及 Weex SDK 运行起来的。<br><img src="https://i.imgur.com/JhjS7Gv.png" alt=""></p>
<h4 id="3-搭建开发环境"><a href="#3-搭建开发环境" class="headerlink" title="3.搭建开发环境"></a>3.搭建开发环境</h4><h5 id="1）安装依赖"><a href="#1）安装依赖" class="headerlink" title="1）安装依赖"></a>1）安装依赖</h5><p>Weex 官方提供了 weex-toolkit 的脚手架工具来辅助开发和调试。首先，你需要 Node.js 和 Weex CLi。</p>
<p>安装完成后，可以使用以下命令检测是否安装成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ node -v</div><div class="line">v6.11.3</div><div class="line">$ npm -v</div><div class="line">3.10.10</div></pre></td></tr></table></figure></p>
<p>安装weex-toolkit<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g weex-toolkit</div></pre></td></tr></table></figure></p>
<p>注意: 在weex-toolkit1.0.8版本后添加了npm5规范的npm-shrinkwrap.json用于锁定包依赖，故npm版本&lt;5的用户需要通过npm i npm@latest -g更新一下npm的版本，使用前请确认版本是否正确。(尝试用了最新版本各种报错，后面换成6.0.0版本就好了，报错的话，降级一下版本)</p>
<p>查看当前weex版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ weex -v</div></pre></td></tr></table></figure></p>
<p><img src="https://i.imgur.com/qS0sEqy.png" alt=""><br>安装weex-toolkit可能会报错，估计是不能翻墙的原因；国内开发者可以考虑使用淘宝的 npm 镜像。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</div><div class="line">$ cnpm install -g weex-toolkit</div></pre></td></tr></table></figure></p>
<p>安装结束后你可以直接使用 weex 命令验证是否安装成功，它会显示 weex 命令行工具各参数：<br><img src="https://i.imgur.com/VJ3b2Lw.png" alt=""><br>出现如所示的命令，就说明环境搭建已经完成，接下来你可以创建项目了。</p>
<h5 id="2）初始化"><a href="#2）初始化" class="headerlink" title="2）初始化"></a>2）初始化</h5><p>初始化 Weex 项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ weex create awesome-project (awesome-project为项目名称)</div></pre></td></tr></table></figure></p>
<p>执行完命令后，在 awesome-project 目录中就创建了一个使用 Weex 和 Vue 的模板项目。</p>
<h5 id="3）开发"><a href="#3）开发" class="headerlink" title="3）开发"></a>3）开发</h5><p>1.进入到项目根目录： cd awesome-project</p>
<p>2.npm install 安装项目依赖。</p>
<p>3.启动本地 web 服务，浏览器预览渲染效果：npm start</p>
<p>4.然后我们打开浏览器，进入 <a href="http://http://192.168.72.65:8081/index.html" target="_blank" rel="external">http://http://192.168.72.65:8081/index.html</a> 即可看到 weex h5 页面。</p>
<p>5.添加 Android 或 iOS 平台：weex platform add android 或 weex platform add ios</p>
<p>6.运行：weex run android</p>
<p>注意：5、6是针对运行在Android手机上，不运行在手机上可以不需要装。</p>
<h4 id="4-Weex-debug-调试"><a href="#4-Weex-debug-调试" class="headerlink" title="4.Weex debug 调试"></a>4.Weex debug 调试</h4><ol>
<li>命令： weex debug ，浏览器自动打开待调试的页面。<br><img src="https://i.imgur.com/tCRczXi.png" alt=""></li>
</ol>
<p>2.使用 weex playground app 扫描二维码，扫描成功后，浏览器自动跳转到下面页面，点击下图框中的二维码，并使用 weex playground app 扫描，即可开始调试待 debug 的页面。<br><img src="https://i.imgur.com/XUV1osD.png" alt=""><br>3.扫描框中二位码成功后，即看到下面页面。<br><img src="https://i.imgur.com/xGcA1BK.png" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> Weex </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android屏幕适配机制和规则]]></title>
      <url>/2017/09/21/Android%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D%E7%9A%84%E6%9C%BA%E5%88%B6%E5%92%8C%E8%A7%84%E5%88%99/</url>
      <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>说到屏幕适配，说简单也不简单，说难也不难，关键是看自己是否掌握了适配的机制和规则。前几天问了一个朋友他现在公司对于适配是怎么做的，然后他就跟我巴拉巴拉说了一大堆，最后总结出来说：“都是这么干的”，对于为什么这么干的解释就有点含糊不清了。正好最近公司这边也出现了部分机子的适配问题，所以就想自己整理总结一下。<br><br><a id="more"></a><br>其实Android官网本身就有一套适配机制，大家可能遇到适配问题直接在网上找现成的解决方案，而忽视了官网其实已经给出了自己的一套适配方案。具体的android屏幕适配有很多方法，比如drawable,layout,values等，在适配之前你需要掌握适配机制以及规则，当你掌握了之后接下来的工作才会得心应手，话不多少开始直接进入主题。</p>
<h4 id="Android适配机制原理"><a href="#Android适配机制原理" class="headerlink" title="Android适配机制原理"></a>Android适配机制原理</h4><p>UI界面在不同平台的适配受屏幕尺寸和屏幕密度影响，Android适配机制就是在资源后面添加对这两种因素的限定，通过不同的限定区分不同的平台资源，Android在使用资源的时候会优先选择满足本平台限定的资源，再找最接近条件的，再找默认（即不加限定），通过选择适合当前平台的资源来完成不同平台的适配。<br><br>　　屏幕尺寸分为：small,normal,large,xlarge分别表示小，中，大，超大屏<br><br>　　屏幕密度分为：ldpi,mdpi,hdpi,xhdpi，它们的标准值分别是：120dpi，160dpi，240dpi，320dpi<br><br>　　通俗点讲就是：系统根据当前的屏幕大小和密度，然后动态的采用程序中提供特定的资源。</p>
<h4 id="使用配置限定符"><a href="#使用配置限定符" class="headerlink" title="使用配置限定符"></a>使用配置限定符</h4><h5 id="Android-支持若干配置限定符，您可以通过使用短划线分隔每个限定符，向一个目录名称添加多个限定符。"><a href="#Android-支持若干配置限定符，您可以通过使用短划线分隔每个限定符，向一个目录名称添加多个限定符。" class="headerlink" title="Android 支持若干配置限定符，您可以通过使用短划线分隔每个限定符，向一个目录名称添加多个限定符。"></a>Android 支持若干配置限定符，您可以通过使用短划线分隔每个限定符，向一个目录名称添加多个限定符。<br></h5><p>1.屏幕配置提供特殊资源的配置限定符。</p>
<p><img src="https://i.imgur.com/vK6G3Ea.png" alt=""></p>
<p>2.Android3.2之后引入屏幕尺寸新的限定符，如下图表2</p>
<p><img src="https://i.imgur.com/ejS0O3m.png" alt=""></p>
<p>3.下表按优先顺序列出了有效的配置限定符；如果对资源目录使用多个限定符，则必须按照表中列出的顺序将它们添加到目录名称。</p>
<p><img src="https://i.imgur.com/Rpujt0D.png" alt=""></p>
<p><font color="#FF0000">需要注意的是：限定符的匹配是向下匹配，从高向低找，否则编译不过！</font></p>
<h4 id="屏幕适配的规则"><a href="#屏幕适配的规则" class="headerlink" title="屏幕适配的规则"></a>屏幕适配的规则</h4><p>1.drawable适配过程：找与设备密度对应的目录下的图片-》往更高质量的找-》退而求其次找低质量的。<br><br>2.layout适配过程：找与设备对应的目录，找不到则从比设备分辨率低一级的目录开始依次往下找。<br><br>3.values适配过程：同layout。</p>
<h4 id="关于屏幕分辨率适配的实践"><a href="#关于屏幕分辨率适配的实践" class="headerlink" title="关于屏幕分辨率适配的实践"></a>关于屏幕分辨率适配的实践</h4><p>在实际项目中，很多APP中都是以（values-1184x720、values-1280x720）屏幕分辨率进行适配，但是在官网的匹配属性集里并没有出现。</p>
<p>格式：文件夹名称-大数值x小数值（大数值在前，小数值在后）；<br></p>
<p>然而官方文档上实际推荐的是（values-sw300dp、values-sw320dp、values-sw340dp）最小宽度这种方式去适配。<br><br>像我这么热爱学习的小伙子，肯定不能放过这么好的探索机会啊。<img src="https://i.imgur.com/zR75LkJ.jpg" alt=""><br><br>于是一顿查阅，最后找到的答案是：“在实际开发过程中屏幕尺寸不够直观，android将其转换为分辨率表示，根据屏幕具体分辨率可选择相应的限定符。”<br></p>
<p>有疑惑直接用代码说话，新建项目验证一下，验证完之后发现不对啊，总是有一些出入。最后发现在有虚拟导航栏的机子上，不走（values-1280x720）这套，心中一万个草泥马，经过多番实践发现实际匹配的分辨率是除去虚拟导航栏的分辨率（坑爹啊）。</p>
<p>正当我欣喜若狂的时候，旁边的坑货同事突然问我在1280x720（实际是1184x720）的机子上，如果values下面有两套（values-1184x716，values-1180x720),这时候该怎么匹配。顿时就给他蒙了，卧槽怎么会有这么奇葩的问题，还是别想了，直接动手撸代码看一下效果，最后得出的结论是values-1184x716完胜。</p>
<h5 id="总结：values匹配规则是按照差值是否相同。如果差值不同，则匹配差值小的values。如果差值相同，按照高低匹配规则，则匹配高的values。"><a href="#总结：values匹配规则是按照差值是否相同。如果差值不同，则匹配差值小的values。如果差值相同，按照高低匹配规则，则匹配高的values。" class="headerlink" title="总结：values匹配规则是按照差值是否相同。如果差值不同，则匹配差值小的values。如果差值相同，按照高低匹配规则，则匹配高的values。"></a>总结：values匹配规则是按照差值是否相同。如果差值不同，则匹配差值小的values。如果差值相同，按照高低匹配规则，则匹配高的values。</h5><p>如有不妥之处，欢迎下方留言指正！<br></p>
<p>最后附上一张手工绘制图（请忽略我的字，原谅我是键盘手）。<img src="https://i.imgur.com/UHqLFRp.jpg" alt=""><br></p>
<p>手工绘制图：<img src="https://i.imgur.com/OQrVDvt.jpg" alt=""></p>
<h4 id="尊重原创，转载请注明：From-Choshim（http-xiangzhenwang-top-）"><a href="#尊重原创，转载请注明：From-Choshim（http-xiangzhenwang-top-）" class="headerlink" title="尊重原创，转载请注明：From Choshim（http://xiangzhenwang.top/）"></a>尊重原创，转载请注明：From Choshim（<a href="http://xiangzhenwang.top/）">http://xiangzhenwang.top/）</a></h4><h4 id="更多参考资料"><a href="#更多参考资料" class="headerlink" title="更多参考资料"></a>更多参考资料</h4><p><a href="https://developer.android.com/guide/topics/resources/providing-resources.html" target="_blank" rel="external">https://developer.android.com/guide/topics/resources/providing-resources.html</a><br><br><a href="http://www.jianshu.com/p/a92530c9d0cd" title="Android 屏幕适配教程、适配机制介绍" target="_blank" rel="external">http://www.jianshu.com/p/a92530c9d0cd</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows上使用Hexo+github搭建自己的博客]]></title>
      <url>/2017/09/18/Windows%E4%B8%8A%E4%BD%BF%E7%94%A8Hexo+github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p><img src="https://i.imgur.com/Lbipjhv.png" alt=""><br><a id="more"></a></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前段时间，逛朋友圈无意间发现了同事分享的博客，打开看一下，这效果不错。思考二三觉得搭建个自己的博客其实也挺不错的，可以把自己总结的东西放在上面，方便自己以后查找同时也可以让看到的人少走弯路。这是一个两全其美的办法，何乐而不为呢。<br></p>
<p>第二天到公司去请教我同事了，原本以为按照他走过的足迹，我可以一气呵成顺利的完成搭建操作，可是事实并不是这样，遇到的坑也挺多，我足足整了差不多一天半的时间（包括主题美化，评论等功能）。<br></p>
<p>网上有很多5分钟搭建免费个人博客的内容（直接用默认的主题），但前提是你一路下来没遇到坑，遇到坑你就爬不上来了有木有？真的是一把辛酸泪啊！<img src="https://i.imgur.com/3GR5zUX.jpg" alt=""></p>
<h3 id="1-搭建本地环境"><a href="#1-搭建本地环境" class="headerlink" title="1.搭建本地环境"></a>1.搭建本地环境</h3><h4 id="1-安装工具"><a href="#1-安装工具" class="headerlink" title="1.安装工具"></a>1.安装工具</h4><p>都是程序猿、工程师安装工具这么简单的事情，想必不用我手把手教你吧，如果你真不知道怎么安装，那我只能告诉你：好好去学习一下《如何正确使用搜索引擎》这门课程。哈哈，扯远了，回归主题。</p>
<h5 id="1、安装Node-js"><a href="#1、安装Node-js" class="headerlink" title="1、安装Node.js"></a>1、安装Node.js<br></h5><p><a href="https://nodejs.org/" target="_blank" rel="external">https://nodejs.org</a><br><br>选择需要的版本下载，分别是32位和64位。下载后安装一直默认下一步就行。<br></p>
<h5 id="2、安装Git"><a href="#2、安装Git" class="headerlink" title="2、安装Git"></a>2、安装Git</h5><p><a href="https://git-scm.com/" target="_blank" rel="external">https://git-scm.com/</a></p>
<p>打开cmd命令行(win+r 输入cmd回车)分别执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">node -v</div><div class="line">npm -v</div><div class="line">git --version</div></pre></td></tr></table></figure></p>
<p>得到如图的信息，出现版本信息证明安装成功。反之，说明安装失败，请检查工具是否安装正确。</p>
<p><img src="https://i.imgur.com/LKfHucx.png" alt=""></p>
<h5 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>等待自动安装完成后。输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo -v</div></pre></td></tr></table></figure></p>
<p>检查是否安装成功,成功之后。得到如下图的信息</p>
<p><img src="https://i.imgur.com/ZcHNMFB.png" alt=""></p>
<p>所有都安装成功，一起准备就绪。</p>
<h4 id="2-部署本地博客"><a href="#2-部署本地博客" class="headerlink" title="2.部署本地博客"></a>2.部署本地博客</h4><p>初始化之前先新建一个文件夹存放hexo配置，然后使用命令行切换到文件夹目录下</p>
<p>1.初始化Hexo</p>
<pre><code>hexo init
</code></pre><p>2.安装依赖包</p>
<pre><code>npm install hexo --save
</code></pre><p>这里可能会遇到输入命令不成功，安装hexo-deployer-git插件</p>
<pre><code>npm install hexo-deployer-git --save
</code></pre><p>3.本地生成网页</p>
<pre><code>hexo g
</code></pre><p>4.接下来测试hexo是否安装成功</p>
<pre><code>hexo s
</code></pre><p>得到如图</p>
<p><img src="https://i.imgur.com/QOhKXHg.png" alt=""></p>
<p>本地浏览器输入 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a></p>
<p>会看到下图这样的页面，证明本地hexo默认模板配置成功</p>
<p><img src="https://i.imgur.com/XwGRXiR.png" alt=""></p>
<h3 id="2-部署远程"><a href="#2-部署远程" class="headerlink" title="2.部署远程"></a>2.部署远程</h3><h4 id="1-注册Github账号"><a href="#1-注册Github账号" class="headerlink" title="1.注册Github账号"></a>1.注册Github账号</h4><p>注册的过程比较简单，这里不做赘述。</p>
<h4 id="2-新建仓库"><a href="#2-新建仓库" class="headerlink" title="2.新建仓库"></a>2.新建仓库</h4><p>去gitHub新建一个仓库，仓库名必须为 yourusername.github.io，如下图：<br><img src="https://i.imgur.com/TcTJk5t.png" alt=""></p>
<h4 id="3-配置SSH公钥"><a href="#3-配置SSH公钥" class="headerlink" title="3.配置SSH公钥"></a>3.配置SSH公钥</h4><p>远程代码是基于SSH的，需要配置相关SSH。在本地生成SSH key公钥，然后添加到Github上面。如何在本地生成SSH Key，请参考我写的另外一篇博客<a href="http://xiangzhenwang.top/2017/07/28/SSH%20Key%E7%94%9F%E6%88%90/">《Windows如何下生成SSH Key》</a>。</p>
<h4 id="4-配置Github"><a href="#4-配置Github" class="headerlink" title="4.配置Github"></a>4.配置Github</h4><p>现在回到我们的github</p>
<p>找到你之前创建的仓库，yourusername.github.io。</p>
<p>点击仓库的settings选项卡</p>
<p>下拉到GitHub Pages选项中，点击如下图按钮Choose theme</p>
<p><img src="https://i.imgur.com/Ett9LoQ.png" alt=""></p>
<p>然后选择一个theme，点击create</p>
<p><img src="https://i.imgur.com/A7PaJGV.png" alt=""></p>
<h4 id="5-配置Hexo"><a href="#5-配置Hexo" class="headerlink" title="5.配置Hexo"></a>5.配置Hexo</h4><p>编辑存放博客目录下的配置文件_config.yml,在最下面输入以下内容，注意把里面的xiangzhenwang替换成你的用户名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:xiangzhenwang/xiangzhenwang.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<h4 id="6-部署到远程"><a href="#6-部署到远程" class="headerlink" title="6.部署到远程"></a>6.部署到远程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>然后再浏览器中输入<a href="http://yourusername.github.io/就行了" target="_blank" rel="external">http://yourusername.github.io/就行了</a></p>
<h3 id="3-Hexo命令"><a href="#3-Hexo命令" class="headerlink" title="3.Hexo命令"></a>3.Hexo命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hexo g = hexo generate  #生成</div><div class="line">hexo s = hexo server  #启动本地预览</div><div class="line">hexo d = hexo deploy  #远程部署</div><div class="line">hexo n &quot;文章标题&quot; = hexo new &quot;文章标题&quot;</div><div class="line">hexo new page &quot;页面标题&quot; #新建页面</div></pre></td></tr></table></figure>
<p>每次重新部署</p>
<pre><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d
</code></pre><h3 id="4-配置主题以及插件"><a href="#4-配置主题以及插件" class="headerlink" title="4.配置主题以及插件"></a>4.配置主题以及插件</h3><p>你可以自己修改炫酷的主题，以及评论、统计、打赏等插件，具体可以参考<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">NEXT主题配置</a>，这里就不在多说了！</p>
<h3 id="5-域名绑定"><a href="#5-域名绑定" class="headerlink" title="5.域名绑定"></a>5.域名绑定</h3><h4 id="1-域名购买"><a href="#1-域名购买" class="headerlink" title="1.域名购买"></a>1.域名购买</h4><p>上面所以的操作完成之后，你可以通过 <a href="http://yourusername.github.io/" target="_blank" rel="external">http://yourusername.github.io/</a> 直接访问你的博客,但是总感觉不是很高大上，这时候你需要去购买域名，域名购买你可以随便到dnspod或者是万网（阿里云）等购买。博主选的阿里云，在阿里云上搜索你想要的域名，然后支付，紧接着无脑操作，具体自己去实践，不想过多说什么！</p>
<h4 id="2-域名解析"><a href="#2-域名解析" class="headerlink" title="2.域名解析"></a>2.域名解析</h4><p>需要将你在Github上创建的Github Pages的域名 xxx.github.io进行查询,得到一个IP地址。</p>
<p>你可以直接打开cmd然后ping github上的地址，具体下如图：</p>
<p><img src="https://i.imgur.com/qAC4uFN.png" alt=""></p>
<p>最后会得到一串ip地址。</p>
<p>然后打开阿里云的域名解析，将刚才得到的IP填上去就好了，如图：</p>
<p><img src="https://i.imgur.com/iYqH8bK.png" alt=""></p>
<p>如果你不会填，直接点上门的新手引导设置就好了。</p>
<h4 id="3-Github解析"><a href="#3-Github解析" class="headerlink" title="3.Github解析"></a>3.Github解析</h4><p>在Github的xxx.github.io项目,进入Settings 标签页,在Custom domain 功能中,将刚刚申请的域名写进去。</p>
<p><img src="https://i.imgur.com/3A5P8tS.png" alt=""></p>
<p>然后回到你的博客目录下，新建CNAME，里面填入你的域名。 然后执行重新部署命令。</p>
<p><img src="https://i.imgur.com/1rKvp3E.png" alt=""></p>
<p>大功告成，直接访问你的域名就可以的，需要注意的是：有的时候在阿里云设置域名，需要等待一会才会生效！</p>
<h3 id="6-多电脑同步博客"><a href="#6-多电脑同步博客" class="headerlink" title="6.多电脑同步博客"></a>6.多电脑同步博客</h3><p>如果说上面的操作都OK，当然你现在也可以写博客，部署到远程。不过当你回到家或者换一台电脑的时候，发现卧槽出现问题了，另一台电脑没有之前的数据啊！怎么办？这时就需要用的github同步功能了。</p>
<pre><code>在同一个仓库创建两个分支：

Hexo分支 – 用来保存所有Hexo的源文件

master分支 – 用来保存Hexo生成的博客文件

在创建GitHub Pages或者Coding Pages时，以master分支为pages分支。

Hexo的deploy指向master分支部署pages，git的管理指向Hexo分支。
</code></pre><p>之后回家，安装上面的步骤装号环境，在去Github拉取Hexo上分支的代码，然后进行编写博客，写完之后，通过hexo命令行重新部署。</p>
<pre><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d
</code></pre><p>执行hexo命令行会自动将.md文章转成html等推送到远端的master分支。</p>
<p>然后将新增的.md提交到Hexo分支上就OK了。</p>
<p>建议将hexo分支设置为默认分支，这样我们只需要手动管理hexo分支即可，master就交给了hexo去自动管理，不需要理会。</p>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><h4 id="尊重原创，转载请注明：From-Choshim（http-xiangzhenwang-top-）"><a href="#尊重原创，转载请注明：From-Choshim（http-xiangzhenwang-top-）" class="headerlink" title="尊重原创，转载请注明：From Choshim（http://xiangzhenwang.top/）"></a>尊重原创，转载请注明：From Choshim（<a href="http://xiangzhenwang.top/）">http://xiangzhenwang.top/）</a></h4>]]></content>
      
        
        <tags>
            
            <tag> Tool </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows下如何生成SSH Key]]></title>
      <url>/2017/07/28/SSH%20Key%E7%94%9F%E6%88%90/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们在github提交代码，经常会提示你输入账号和密码，输入一两次也就算了，关键是每次提交都需要验证，我相信很多童鞋都很不爽，那是因为你在github没有正确配置SSH Key。下面跟着我一起配置，妈妈再也不用担心我输密码了，哈哈~~~<br><a id="more"></a></p>
<h2 id="SSH-Key是什么？"><a href="#SSH-Key是什么？" class="headerlink" title="SSH Key是什么？"></a>SSH Key是什么？</h2><p>SSH key提供了一种与GitHub通信的方式，通过这种方式，能够在不输入密码的情况下，将GitHub作为自己的remote端服务器，进行版本控制。</p>
<h2 id="检查SSH-keys是否存在"><a href="#检查SSH-keys是否存在" class="headerlink" title="检查SSH keys是否存在"></a>检查SSH keys是否存在</h2><p>在git终端输入：<code>ls -al ~/.ssh</code>&emsp;检查SSH keys是否存在，如图：</p>
<p>1.本地不存在ssh key</p>
<p><img src="http://i.imgur.com/BJ3fAlY.png" alt=""></p>
<p>2.本地已经生成ssh key，那就直接跳过第二步，进行第三步操作。</p>
<p><img src="http://i.imgur.com/CXNdzol.png" alt=""></p>
<h2 id="生成新的ssh-key"><a href="#生成新的ssh-key" class="headerlink" title="生成新的ssh key"></a>生成新的ssh key</h2><p>在git终端输入：  </p>
<p><code>ssh-keygen -t rsa -C &quot;XX@github&quot;</code>&emsp;引号中是你在github上的注册邮箱，中间一直回车就好了，最后生成如下图：</p>
<p><img src="http://i.imgur.com/BAFytPQ.png" alt=""></p>
<p>将新生成的key添加到ssh-agent中</p>
<pre><code>eval &quot;$(ssh-agent -s)&quot;
Agent pid 59566
ssh-add ~/.ssh/id_rsa
</code></pre><h2 id="将ssh-key添加到GitHub中"><a href="#将ssh-key添加到GitHub中" class="headerlink" title="将ssh key添加到GitHub中"></a>将ssh key添加到GitHub中</h2><p>用文本编辑器打开id_rsa.pub文件，里面的信息即为SSH key，将这些信息复制到GitHub的Add SSH key页面即可，一下提供不同的操作系统，直接将SSH key从文件拷贝到粘贴板中，如下：</p>
<p><strong>mac</strong></p>
<pre><code>pbcopy &lt; ~/.ssh/id_rsa.pub
</code></pre><p><strong>windows</strong></p>
<pre><code>clip &lt; ~/.ssh/id_rsa.pub
</code></pre><p><strong>linux</strong></p>
<pre><code>sudo apt-get install xclip
</code></pre><p><br></p>
<h2 id="OK大功告成，妈妈再也不用担心我输密码了！"><a href="#OK大功告成，妈妈再也不用担心我输密码了！" class="headerlink" title="OK大功告成，妈妈再也不用担心我输密码了！"></a>OK大功告成，妈妈再也不用担心我输密码了！</h2><h4 id="尊重原创，转载请注明：From-Choshim（http-xiangzhenwang-top-）"><a href="#尊重原创，转载请注明：From-Choshim（http-xiangzhenwang-top-）" class="headerlink" title="尊重原创，转载请注明：From Choshim（http://xiangzhenwang.top/）"></a>尊重原创，转载请注明：From Choshim（<a href="http://xiangzhenwang.top/）">http://xiangzhenwang.top/）</a></h4>]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Tool </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>

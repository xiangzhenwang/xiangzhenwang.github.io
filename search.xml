<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Windows上使用Hexo+github搭建自己的博客]]></title>
    <url>%2F2017%2F09%2F21%2FWindows%E4%B8%8A%E4%BD%BF%E7%94%A8Hexo%2Bgithub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[前言前段时间，逛朋友圈无意间发现了同事分享的博客，打开看一下，这效果不错。思考二三觉得搭建个自己的博客其实也挺不错的，可以把自己总结的东西放在上面，方便自己以后查找同时也可以让看到的人少走弯路。这是一个两全其美的办法，何乐而不为呢。 第二天到公司去请教我同事了，原本以为按照他走过的足迹，我可以一气呵成顺利的完成搭建操作，可是事实并不是这样，遇到的坑也挺多，我足足整了差不多一天半的时间（包括主题美化，评论等功能）。 网上有很多5分钟搭建免费个人博客的内容（直接用默认的主题），但前提是你一路下来没遇到坑，遇到坑你就爬不上来了有木有？真的是一把辛酸泪啊！ 1.搭建本地环境1.安装工具都是程序猿、工程师安装工具这么简单的事情，想必不用我手把手教你吧，如果你真不知道怎么安装，那我只能告诉你：好好去学习一下《如何正确使用搜索引擎》这门课程。哈哈，扯远了，回归主题。 1、安装Node.jshttps://nodejs.org选择需要的版本下载，分别是32位和64位。下载后安装一直默认下一步就行。 2、安装Githttps://git-scm.com/ 打开cmd命令行(win+r 输入cmd回车)分别执行123node -vnpm -vgit --version 得到如图的信息，出现版本信息证明安装成功。反之，说明安装失败，请检查工具是否安装正确。 3.安装Hexo1npm install -g hexo-cli 等待自动安装完成后。输入1hexo -v 检查是否安装成功,成功之后。得到如下图的信息 所有都安装成功，一起准备就绪。 2.部署本地博客初始化之前先新建一个文件夹存放hexo配置，然后使用命令行切换到文件夹目录下 1.初始化Hexo hexo init 2.安装依赖包 npm install hexo --save 这里可能会遇到输入命令不成功，安装hexo-deployer-git插件 npm install hexo-deployer-git --save 3.本地生成网页 hexo g 4.接下来测试hexo是否安装成功 hexo s 得到如图 本地浏览器输入 http://localhost:4000 会看到下图这样的页面，证明本地hexo默认模板配置成功 2.部署远程1.注册Github账号注册的过程比较简单，这里不做赘述。 2.新建仓库去gitHub新建一个仓库，仓库名必须为 yourusername.github.io，如下图： 3.配置SSH公钥远程代码是基于SSH的，需要配置相关SSH。在本地生成SSH key公钥，然后添加到Github上面。如何在本地生成SSH Key，请参考我写的另外一篇博客《Windows如何下生成SSH Key》。 4.配置Github现在回到我们的github 找到你之前创建的仓库，yourusername.github.io。 点击仓库的settings选项卡 下拉到GitHub Pages选项中，点击如下图按钮Choose theme 然后选择一个theme，点击create 5.配置Hexo编辑存放博客目录下的配置文件_config.yml,在最下面输入以下内容，注意把里面的xiangzhenwang替换成你的用户名。1234deploy: type: git repo: git@github.com:xiangzhenwang/xiangzhenwang.github.io.git branch: master 6.部署到远程12hexo ghexo d 然后再浏览器中输入http://yourusername.github.io/就行了 3.Hexo命令12345hexo g = hexo generate #生成hexo s = hexo server #启动本地预览hexo d = hexo deploy #远程部署hexo n &quot;文章标题&quot; = hexo new &quot;文章标题&quot;hexo new page &quot;页面标题&quot; #新建页面 每次重新部署 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 4.配置主题以及插件你可以自己修改炫酷的主题，以及评论、统计、打赏等插件，具体可以参考NEXT主题配置，这里就不在多说了！ 5.域名绑定1.域名购买上面所以的操作完成之后，你可以通过 http://yourusername.github.io/ 直接访问你的博客,但是总感觉不是很高大上，这时候你需要去购买域名，域名购买你可以随便到dnspod或者是万网（阿里云）等购买。博主选的阿里云，在阿里云上搜索你想要的域名，然后支付，紧接着无脑操作，具体自己去实践，不想过多说什么！ 2.域名解析需要将你在Github上创建的Github Pages的域名 xxx.github.io进行查询,得到一个IP地址。 你可以直接打开cmd然后ping github上的地址，具体下如图： 最后会得到一串ip地址。 然后打开阿里云的域名解析，将刚才得到的IP填上去就好了，如图： 如果你不会填，直接点上门的新手引导设置就好了。 3.Github解析在Github的xxx.github.io项目,进入Settings 标签页,在Custom domain 功能中,将刚刚申请的域名写进去。 然后回到你的博客目录下，新建CNAME，里面填入你的域名。 然后执行重新部署命令。 大功告成，直接访问你的域名就可以的，需要注意的是：有的时候在阿里云设置域名，需要等待一会才会生效！ 6.多电脑同步博客如果说上面的操作都OK，当然你现在也可以写博客，部署到远程。不过当你回到家或者换一台电脑的时候，发现卧槽出现问题了，另一台电脑没有之前的数据啊！怎么办？这时就需要用的github同步功能了。 在同一个仓库创建两个分支： Hexo分支 – 用来保存所有Hexo的源文件 master分支 – 用来保存Hexo生成的博客文件 在创建GitHub Pages或者Coding Pages时，以master分支为pages分支。 Hexo的deploy指向master分支部署pages，git的管理指向Hexo分支。 之后回家，安装上面的步骤装号环境，在去Github拉取Hexo上分支的代码，然后进行编写博客，写完之后，通过hexo命令行重新部署。 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 执行hexo命令行会自动将.md文章转成html等推送到远端的master分支。 然后将新增的.md提交到Hexo分支上就OK了。 建议将hexo分支设置为默认分支，这样我们只需要手动管理hexo分支即可，master就交给了hexo去自动管理，不需要理会。 End尊重原创，转载请注明：From Choshim（http://xiangzhenwang.top/）]]></content>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android屏幕适配机制和规则]]></title>
    <url>%2F2017%2F09%2F18%2FAndroid%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D%E7%9A%84%E6%9C%BA%E5%88%B6%E5%92%8C%E8%A7%84%E5%88%99%2F</url>
    <content type="text"><![CDATA[前言说到屏幕适配，说简单也不简单，说难也不难，关键是看自己是否掌握了适配的机制和规则。前几天问了一个朋友他现在公司对于适配是怎么做的，然后他就跟我巴拉巴拉说了一大堆，最后总结出来说：“都是这么干的”，对于为什么这么干的解释就有点含糊不清了。正好最近公司这边也出现了部分机子的适配问题，所以就想自己整理总结一下。其实Android官网本身就有一套适配机制，大家可能遇到适配问题直接在网上找现成的解决方案，而忽视了官网其实已经给出了自己的一套适配方案。具体的android屏幕适配有很多方法，比如drawable,layout,values等，在适配之前你需要掌握适配机制以及规则，当你掌握了之后接下来的工作才会得心应手，话不多少开始直接进入主题。 Android适配机制原理UI界面在不同平台的适配受屏幕尺寸和屏幕密度影响，Android适配机制就是在资源后面添加对这两种因素的限定，通过不同的限定区分不同的平台资源，Android在使用资源的时候会优先选择满足本平台限定的资源，再找最接近条件的，再找默认（即不加限定），通过选择适合当前平台的资源来完成不同平台的适配。 屏幕尺寸分为：small,normal,large,xlarge分别表示小，中，大，超大屏 屏幕密度分为：ldpi,mdpi,hdpi,xhdpi，它们的标准值分别是：120dpi，160dpi，240dpi，320dpi 通俗点讲就是：系统根据当前的屏幕大小和密度，然后动态的采用程序中提供特定的资源。 使用配置限定符Android 支持若干配置限定符，您可以通过使用短划线分隔每个限定符，向一个目录名称添加多个限定符。1.屏幕配置提供特殊资源的配置限定符。 2.Android3.2之后引入屏幕尺寸新的限定符，如下图表2 3.下表按优先顺序列出了有效的配置限定符；如果对资源目录使用多个限定符，则必须按照表中列出的顺序将它们添加到目录名称。 需要注意的是：限定符的匹配是向下匹配，从高向低找，否则编译不过！ 屏幕适配的规则1.drawable适配过程：找与设备密度对应的目录下的图片-》往更高质量的找-》退而求其次找低质量的。2.layout适配过程：找与设备对应的目录，找不到则从比设备分辨率低一级的目录开始依次往下找。3.values适配过程：同layout。 关于屏幕分辨率适配的实践在实际项目中，很多APP中都是以（values-1184x720、values-1280x720）屏幕分辨率进行适配，但是在官网的匹配属性集里并没有出现。 格式：文件夹名称-大数值x小数值（大数值在前，小数值在后）； 然而官方文档上实际推荐的是（values-sw300dp、values-sw320dp、values-sw340dp）最小宽度这种方式去适配。像我这么热爱学习的小伙子，肯定不能放过这么好的探索机会啊。于是一顿查阅，最后找到的答案是：“在实际开发过程中屏幕尺寸不够直观，android将其转换为分辨率表示，根据屏幕具体分辨率可选择相应的限定符。” 有疑惑直接用代码说话，新建项目验证一下，验证完之后发现不对啊，总是有一些出入。最后发现在有虚拟导航栏的机子上，不走（values-1280x720）这套，心中一万个草泥马，经过多番实践发现实际匹配的分辨率是除去虚拟导航栏的分辨率（坑爹啊）。 正当我欣喜若狂的时候，旁边的坑货同事突然问我在1280x720（实际是1184x720）的机子上，如果values下面有两套（values-1184x716，values-1180x720),这时候该怎么匹配。顿时就给他蒙了，卧槽怎么会有这么奇葩的问题，还是别想了，直接动手撸代码看一下效果，最后得出的结论是values-1184x716完胜。 总结：values匹配规则是按照差值是否相同。如果差值不同，则匹配差值小的values。如果差值相同，按照高低匹配规则，则匹配高的values。如有不妥之处，欢迎下方留言指正！ 最后附上一张手工绘制图（请忽略我的字，原谅我是键盘手）。 手工绘制图： 尊重原创，转载请注明：From Choshim（http://xiangzhenwang.top/）更多参考资料https://developer.android.com/guide/topics/resources/providing-resources.htmlhttp://www.jianshu.com/p/a92530c9d0cd]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows下如何生成SSH Key]]></title>
    <url>%2F2017%2F07%2F28%2FSSH%20Key%E7%94%9F%E6%88%90%2F</url>
    <content type="text"><![CDATA[前言我们在github提交代码，经常会提示你输入账号和密码，输入一两次也就算了，关键是每次提交都需要验证，我相信很多童鞋都很不爽，那是因为你在github没有正确配置SSH Key。下面跟着我一起配置，妈妈再也不用担心我输密码了，哈哈~~~ SSH Key是什么？SSH key提供了一种与GitHub通信的方式，通过这种方式，能够在不输入密码的情况下，将GitHub作为自己的remote端服务器，进行版本控制。 检查SSH keys是否存在在git终端输入：ls -al ~/.ssh&emsp;检查SSH keys是否存在，如图： 1.本地不存在ssh key 2.本地已经生成ssh key，那就直接跳过第二步，进行第三步操作。 生成新的ssh key在git终端输入： ssh-keygen -t rsa -C &quot;XX@github&quot;&emsp;引号中是你在github上的注册邮箱，中间一直回车就好了，最后生成如下图： 将新生成的key添加到ssh-agent中 eval &quot;$(ssh-agent -s)&quot; Agent pid 59566 ssh-add ~/.ssh/id_rsa 将ssh key添加到GitHub中用文本编辑器打开id_rsa.pub文件，里面的信息即为SSH key，将这些信息复制到GitHub的Add SSH key页面即可，一下提供不同的操作系统，直接将SSH key从文件拷贝到粘贴板中，如下： mac pbcopy &lt; ~/.ssh/id_rsa.pub windows clip &lt; ~/.ssh/id_rsa.pub linux sudo apt-get install xclip OK大功告成，妈妈再也不用担心我输密码了！尊重原创，转载请注明：From Choshim（http://xiangzhenwang.top/）]]></content>
      <tags>
        <tag>Android</tag>
        <tag>Tool</tag>
      </tags>
  </entry>
</search>
